// Copyright 2019-present Facebook Inc. All rights reserved.
// This source code is licensed under the Apache 2.0 license found
// in the LICENSE file in the root directory of this source tree.

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/examples/privacytenant/ent/dataset"
	"github.com/facebook/ent/examples/privacytenant/ent/tenant"
)

// Dataset is the model entity for the Dataset schema.
type Dataset struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DatasetQuery when eager-loading is set.
	Edges          DatasetEdges `json:"edges"`
	dataset_tenant *int
}

// DatasetEdges holds the relations/edges for other nodes in the graph.
type DatasetEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DatasetEdges) TenantOrErr() (*Tenant, error) {
	if e.loadedTypes[0] {
		if e.Tenant == nil {
			// The edge tenant was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: tenant.Label}
		}
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dataset) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case dataset.FieldID:
			values[i] = &sql.NullInt64{}
		case dataset.FieldName:
			values[i] = &sql.NullString{}
		case dataset.ForeignKeys[0]: // dataset_tenant
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Dataset", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dataset fields.
func (d *Dataset) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dataset.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			d.ID = int(value.Int64)
		case dataset.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dataset.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field dataset_tenant", value)
			} else if value.Valid {
				d.dataset_tenant = new(int)
				*d.dataset_tenant = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTenant queries the "tenant" edge of the Dataset entity.
func (d *Dataset) QueryTenant() *TenantQuery {
	return (&DatasetClient{config: d.config}).QueryTenant(d)
}

// Update returns a builder for updating this Dataset.
// Note that you need to call Dataset.Unwrap() before calling this method if this Dataset
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dataset) Update() *DatasetUpdateOne {
	return (&DatasetClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the Dataset entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dataset) Unwrap() *Dataset {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dataset is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dataset) String() string {
	var builder strings.Builder
	builder.WriteString("Dataset(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", name=")
	builder.WriteString(d.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Datasets is a parsable slice of Dataset.
type Datasets []*Dataset

func (d Datasets) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
